version: "3"
services:
  app:
    container_name: person-app
    image: scottharben/person:app
    networks:
      - local_net
    environment:
      - VIRTUAL_HOST=person-app.site
      - LETSENCRYPT_HOST=person-app.site
      - LETSENCRYPT_EMAIL=scottharben@gmail.com   
    depends_on:
      - api      
  api:
    container_name: person-api
    image: scottharben/person:api
    networks:
      - local_net
    environment:
      - PORT=9000
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=Person
      - MYSQL_USER=superuser
      - MYSQL_PASSWORD=superuser
      - VIRTUAL_HOST=api.person-app.site
      - VIRTUAL_PORT=9000
      - LETSENCRYPT_HOST=api.person-app.site
      - LETSENCRYPT_EMAIL=scottharben@gmail.com  
    restart: always
    depends_on:
      - db
  db:
    container_name: mysql
    image: mysql
    networks:
      - local_net
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=Person
      - MYSQL_USER=superuser
      - MYSQL_PASSWORD=superuser
    command: --default-authentication-plugin=mysql_native_password
    depends_on:
      - nginx-proxy-letsencrypt
  nginx-proxy-letsencrypt:
    container_name: nginx-proxy-letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    networks:
      - local_net
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DEFAULT_EMAIL=scottharben@gmail.com
      - NGINX_PROXY_CONTAINER=nginx-proxy
    depends_on:
      - nginx-proxy
  nginx-proxy:
    container_name: nginx-proxy
    image: jwilder/nginx-proxy
    networks:
      - local_net
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - certs:/etc/nginx/certs
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30
volumes:
  db-data:
  certs:
  vhost:
  html:
networks:
  local_net:
    driver: bridge
